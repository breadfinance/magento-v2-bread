<?php
/**
 * @var $block Magento\Bundle\Block\Catalog\Product\View\Type\Bundle
 * @var $viewModel \Bread\BreadCheckout\ViewModel\Product\Type\Bundle
 */
$viewModel = $block->getData('view_model');
$product = $block->getProduct();

if (!$viewModel->isAllowedRender($product)) {
    return;
}
?>

<div id="bread-btn-cntnr">
    <div id="bread-checkout-btn" title="Bread Checkout" class="button" <?= /* @noEscape */ $viewModel->getIsDefaultSize(); ?>>
        <span>
            <span><img src="<?= /* @noEscape */ $block->getViewFileUrl('Bread_BreadCheckout/bread/images/ajax-loader-small.gif'); ?>" alt="<?= /* @noEscape */ __('Bread Checkout'); ?>" /></span>
        </span>
    </div>
    <div class="button-prevent" id="button-prevent">
        <span class="buy_error_tip override_tip" data-content="<?= /* @noEscape */ __('Please complete product configuration') ?>">&nbsp;</span>
    </div>
</div>

<script type="text/x-magento-init">
    {
        "*": {
             "Bread_BreadCheckout/js/product/button": {
                "buttonId": "#bread-checkout-btn, #button-prevent",
                "requiredOptionsSelector": ".product-options-wrapper [aria-required=\"true\"]"
             }
        }
    }
</script>

<script type="text/javascript">
    require(['jquery'], function($) {
        document.configureButton = function (items) {
            var buttonOnProduct     = <?= /* @noEscape */ $viewModel->getIsButtonOnProduct(); ?>;
            var buttonCss           = '<?= /* @noEscape */ $viewModel->getButtonDesign(); ?>';
            var financingInfo       = <?= /* @noEscape */ $viewModel->getFinancingJson(); ?>;
            var breadConfig = {
                buttonId: "bread-checkout-btn",
                asLowAs: <?= /* @noEscape */ $viewModel->getAsLowAs(); ?>,
                <?php if (!$viewModel->isHealthcare()) : ?>
                items: items,
                <?php else : ?>
                customTotal: items[0]['price'],
                <?php endif; ?>
                discounts: <?= /* @noEscape */ $viewModel->getDiscountDataJson(); ?>,
                allowCheckout: <?= /* @noEscape */ $viewModel->getAllowCheckout(); ?>,
                done: function (err, tx_token) {
                    if (tx_token !== undefined) {
                        var i = document.createElement('input');
                        var k = document.createElement('input');
                        i.type = 'hidden';
                        i.name = 'token';
                        i.value = tx_token;
                        k.type = 'hidden';
                        k.name = 'form_key';
                        k.value = $.cookie('form_key');
                        var f = document.createElement('form');
                        f.action = '<?= /* @noEscape */ $viewModel->getValidateOrderUrl(); ?>?product_page=1';
                        f.method = 'POST';
                        f.appendChild(i);
                        f.appendChild(k);
                        document.body.appendChild(f);
                        f.submit();
                    } else {
                        var errorInfo = {
                            bread_config: breadConfig,
                            err: err
                        };
                        document.logBreadIssue('error', errorInfo, 'tx_token undefined in done callback');
                    }
                },

                /**
                 * Calculate tax value callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateTax: function (shippingAddress, callback) {
                    var productForm = $('#product_addtocart_form');
                    var errorInfo;

                    shippingAddress.block_key                       = '<?= /* @noEscape */ $viewModel->getBlockCode(); ?>';
                    shippingAddress.selected_sku                    = document.selectedSku + document.customOptions;
                    shippingAddress.selected_simple_product_id      = document.selectedSimpleProductId;
                    shippingAddress.main_product_id                 = document.productId;
                    shippingAddress.buy_request                     = productForm.serialize();

                    var taxEstimationUrl = '<?= /* @noEscape */ $viewModel->getTaxEstimationUrl(); ?>';
                    var shippingString = JSON.stringify(shippingAddress);

                    $.ajax({
                        url: taxEstimationUrl,
                        data: { shippingInfo: shippingString },
                        type: 'post'
                    }).done(function(response) {
                        try {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingString,
                            };
                            if (response !== null && typeof response === 'object') {
                                if (response.error) {
                                    document.logBreadIssue('error', errorInfo, 'Error estimating tax');
                                    alert('Internal Error');
                                } else {
                                    callback(null, response.result);
                                }
                            } else {
                                document.logBreadIssue('error', errorInfo, 'Response from ' + taxEstimationUrl + ' was not of type Object');
                            }
                        }
                        catch (e) {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingString,
                            };
                            document.logBreadIssue('error', errorInfo, e);
                        }
                    }).fail(function(error) {
                        errorInfo = {
                            shipping_info: shippingString,
                        };
                        document.logBreadIssue('error', errorInfo,
                            'Error code returned when calling ' + taxEstimationUrl + ', with status: ' + error.statusText);
                    });
                },

                /**
                 * Calculate shipping cost callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateShipping: function (shippingAddress, callback) {
                    var productForm = $('#product_addtocart_form');
                    var errorInfo;

                    shippingAddress.block_key                       = '<?= /* @noEscape */ \Bread\BreadCheckout\Helper\Data::BLOCK_CODE_PRODUCT_VIEW; ?>';
                    shippingAddress.additional_data                 = <?= /* @noEscape */ $viewModel->serializer->serialize($viewModel->setAdditionalData()); ?>;
                    shippingAddress.selected_sku                    = document.selectedSku + document.customOptions;
                    shippingAddress.selected_simple_product_id      = document.selectedSimpleProductId;
                    shippingAddress.main_product_id                 = document.productId;
                    shippingAddress.buy_request                     = productForm.serialize();

                    var shippingAddressEstimationUrl = '<?= /* @noEscape */ $viewModel->getShippingAddressEstimationUrl(); ?>';
                    $.ajax({
                        url: shippingAddressEstimationUrl,
                        data: shippingAddress,
                        type: 'post'
                    }).done(function (response) {
                        try {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingAddress,
                            };
                            if (response !== null && typeof response === 'object') {
                                if (response.error) {
                                    document.logBreadIssue('error', errorInfo, 'Error calculating shipping');
                                    alert('Internal Error');
                                } else {
                                    callback(null, response.result);
                                }
                            } else {
                                document.logBreadIssue('error', errorInfo, 'Response from ' + shippingAddressEstimationUrl + ' was not of type Object');
                            }
                        }
                        catch (e) {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingAddress,
                            };
                            document.logBreadIssue('error', errorInfo, e);
                        }
                    }).fail(function(error) {
                        errorInfo = {
                            shipping_info: shippingAddress,
                        };
                        document.logBreadIssue('error', errorInfo,
                            'Error code returned when calling ' + shippingAddressEstimationUrl + ', with status: ' + error.statusText);
                    });
                },

                /**
                 * Add to cart call back used when allow checkout from product page = false
                 *
                 * @param callback
                 */
                addToCart:  function(callback) {
                    document.getElementById('product_addtocart_form').submit();
                }
            };

            if (buttonCss !== null && buttonCss !== '' && buttonCss != false) {
                breadConfig.customCSS = buttonCss;
            }

            if (buttonOnProduct === true) {
                breadConfig.actAsLabel = false;
            }

            if(financingInfo.enabled && financingInfo.mode.cart){
                var cartSizeFinancingId = financingInfo.id;
                var cartSizeThreshold = financingInfo.threshold;
                var itemsPriceSum = items.reduce(function(sum, item) { return sum + item.price * item.quantity; }, 0) / 100;
                breadConfig.financingProgramId = (itemsPriceSum >= cartSizeThreshold) ? cartSizeFinancingId : 'null';
            } else if (financingInfo.enabled && financingInfo.mode.sku){
                var productSku = "<?= /* @noEscape */ $product->getSku(); ?>";
                if(financingInfo.sku_limit.includes(productSku) === true){
                    breadConfig.financingProgramId = financingInfo.id;
                }
            }

            if (!document.hasCheckedConfigData) {

                var configDataUrl = '<?= /* @noEscape */ $viewModel->getConfigDataUrl(); ?>';
                $.ajax({
                    url: configDataUrl,
                    type: 'post',
                    context: this
                }).done(function(data) {
                    document.hasCheckedConfigData = true;

                    if (data.shippingContact !== false) {
                        breadConfig.shippingContact = data.shippingContact;
                    }

                    if (data.billingContact !== false) {
                        breadConfig.billingContact = data.billingContact;
                    }

                    if (typeof bread !== 'undefined') {
                        bread.checkout(breadConfig);
                    }
                }).fail(function(error) {
                    document.logBreadIssue('error', {},
                        'Error code returned when calling ' + configDataUrl + ', with status: ' + error.statusText);
                });

            } else {
                if (typeof bread !== 'undefined') {
                    bread.checkout(breadConfig);
                }
            }
        };

        /**
         * Remove items fron quote after
         * discount calculation
         */
        document.clearQuote = function() {
            var clearQuoteUrl = '<?= /* @noEscape */ $viewModel->getClearQuoteUrl(); ?>';
            $.ajax({
                url: clearQuoteUrl
            }).fail(function(error) {
                document.logBreadIssue('error', {},
                    'Error code returned when calling ' + clearQuoteUrl + ', with status: ' + error.statusText);
            });
        };

        <?php if ($product != null) : ?>

        /**
         * Reconfigure Bread checkout button with updated
         * price and sku values
         */
        document.resetPriceAndSku = function(configurable) {
            if (!configurable) {
                document.configureButton(document.defaultItems);
            } else {
                var price = document.calculatePrice();

                if (typeof document.customOptions !== "undefined") {
                    sku = document.selectedSku + document.customOptions;
                } else {
                    sku = document.selectedSku;
                }

                if (sku != document.previousSku || price != document.previousPrice) {
                    document.previousSku = sku;
                    document.previousPrice = price;
                    document.defaultItems[0]["sku"] = document.previousSku;
                    document.defaultItems[0]["price"] = document.previousPrice;
                    document.configureButton(document.defaultItems);
                }
            }
        };

        /**
         * Calculate updated price based on attribute selections
         * and/or custom options
         *
         * @returns int
         */
        document.calculatePrice = function() {
            var price = 0;
            var customPrice = 0;

            if (document.priceWithOptions) {
                customPrice = document.priceWithOptions;
            }

            var selectedProductPrices = false;
            if((typeof spConfig != 'undefined') && (typeof spConfig.optionPrices[document.selectedSimpleProductId] != 'undefined')){
                selectedProductPrices = spConfig && spConfig.optionPrices[document.selectedSimpleProductId];
            }

            if (selectedProductPrices) {
                price = parseInt(Math.round(selectedProductPrices.finalPrice.amount * 100));
            }

            return Math.max(price, customPrice);
        };
        <?php endif; ?>
        document.defaultItems       = <?= /* @noEscape */ $viewModel->getProductDataJson($product); ?>;
        document.previousPrice      = document.defaultItems[0]["price"];
        document.previousSku        = document.defaultItems[0]["sku"];

        $(document).ready(function () {
            <?php if ($product != null) : ?>
            document.productId                      = '<?= /* @noEscape */ $product->getId(); ?>';
            document.baseProductSku                 = '<?= /* @noEscape */ $product->getSku(); ?>';
            document.selectedSku                    = '<?= /* @noEscape */ $product->getSku(); ?>';
            document.selectedSimpleProductId        = '<?= /* @noEscape */ $product->getId(); ?>';
            document.resetPriceAndSku(false);
            <?php else : ?>
            document.configureButton(document.defaultItems);
            <?php endif; ?>
        });
    });
</script>

<script type="text/javascript">
require([
        'jquery',
        'bundleHelper',
        'jquery/ui',
        'jquery/validate',
        'mage/validation'
   ], function($, bundleHelper) {
        'use strict';

        var globalConfig = {
            optionConfig:               <?= /* @noEscape */ $block->getJsonConfig(); ?>,
            optionConfigBundle:         <?= /* @noEscape */ $viewModel->getBundleProductDataJson($product); ?>,
            //optionCustomConfigBundle:   document.customOptionsBundleProduct,
            optionBundleSelector:       'input.bundle.option, select.bundle.option, textarea.bundle.option',
            optionBundleQtySelector:    'input.qty',
            optionBundleCustomSelector: '.product-custom-option',
            optionHandlers:             {},
            optionCustomHandlers:       {}
        };

        var bundleConfig = {
            addToCartForm:              '#product_addtocart_form',
            buttonPrimaryCustom:        '.action.primary.customize',
            buttonBackCustom:           '.action.back.customization',
            bundleButtonMainConSel:     '.product-info-main',
            bundleButtonDetailsContSel: '.bundle-info .product-details',
            bundleButtonSel:            '#bread-btn-cntnr',
        };

        /**
         * Widget Bread bundle product:
         * Handles rendering of Bundle options and configure Bread button
         */
        $.widget('mage.bundleBread', {
            options: globalConfig,
            cache: {},

            /**
             * @private
             */
            _init: function initPriceBundle() {
                var form = this.element,
                    options = $(this.options.optionBundleSelector, form);
                options.trigger('change');
            },

            /**
             * @private
             */
            _create: function createPriceBundle() {
                var form = this.element,
                    options = $(this.options.optionBundleSelector, form),
                    qty = $(this.options.optionBundleQtySelector, form);
                    //customOptions = $(this.options.optionBundleCustomSelector, form);

                this.cache.currentElement                  = this.options.optionConfig;
                //this.cache.currentElement.selectedCustom   = '';
                this.cache.currentElementBundle            = this.options.optionConfigBundle;
                //this.cache.currentElementCustomBundle      = this.options.optionCustomConfigBundle;
                this.cache.currentElement.previousSku      = this.cache.currentElementBundle.sku;
                this.cache.currentElement.previousPrice    = this.cache.currentElementBundle.selectedPrice;

                options.on('change', this._onBundleOptionChanged.bind(this));
                qty.on('change', this._onQtyFieldChanged.bind(this));
                //customOptions.on('change', this._onBundleCustomOptionChanged.bind(this));
            },

            /**
             * Handle change on bundle option inputs
             * @param {jQuery.Event} event
             * @private
             */
            _onBundleOptionChanged: function onBundleOptionChanged(event) {
                var changes,
                    bundleOption = $(event.target),
                    handler = this.options.optionHandlers[bundleOption.data('role')];

                bundleOption.data('optionContainer', bundleOption.closest(this.options.controlContainer));
                bundleOption.data('qtyField', bundleOption.data('optionContainer')
                    .find(this.options.optionBundleQtySelector));

                if (handler && handler instanceof Function) {
                    changes = handler(bundleOption, this.options.optionConfig, this);
                } else {
                    changes = bundleHelper.defaultGetOptionValue(bundleOption, this.options.optionConfig);
                }

                if (changes) {
                    this.updateBread(changes);
                }
            },

            _getFormData: function getFormData($form){
                var unindexed_array = $('#product_addtocart_form').serializeArray();
                var indexed_array = {};

                $.map(unindexed_array, function(n, i){
                    indexed_array[n['name']] = n['value'];
                });

                return indexed_array;
            },

            /**
             * Handle change on bundle option inputs
             * @param {jQuery.Event} event
             * @private
             */
            _onBundleCustomOptionChanged: function onBundleCustomOptionChanged(event) {
                var changes,
                    bundleOption = $(event.target);

                changes = bundleHelper.defaultGetCustomOptionValue(bundleOption, this.options.optionCustomConfigBundle);

                if (changes) {
                    this.updateBread(changes);
                }
            },

            /**
             * Handle change on qty inputs near bundle option
             * @param {jQuery.Event} event
             * @private
             */
            _onQtyFieldChanged: function onQtyFieldChanged(event) {
                var field = $(event.target),
                    optionInstance,
                    optionConfig;

                if (field.data('optionId') && field.data('optionValueId')) {
                    optionInstance = field.data('option');
                    optionConfig = this.options.optionConfig
                        .options[field.data('optionId')]
                        .selections[field.data('optionValueId')];
                    optionConfig.qty = field.val();
                    optionInstance.trigger('change');
                }
            },

            /**
             * @param {String} key
             * @param {String} row
             * @private
             */
            _renderCustomOption: function (key, row) {
                if (row && row.length > 0 && row[0] !== null) {
                    var widget = this;
                    var optionTotalPrice = 0;
                    var optionSku = '';

                    row.forEach(function(item){
                        var sku = widget.cache.currentElementCustomBundle.options[key].selections[item].sku;
                        optionTotalPrice += widget.cache.currentElementCustomBundle.options[key].selections[item].prices.finalPrice.amount;

                        optionSku += sku + '-';
                        if(qty > 1) {
                            optionSku += qty + '-';
                        }
                    });

                    this.cache.currentElement.selectedPrice += optionTotalPrice;
                    this.cache.currentElement.selectedSku += optionSku;
                    this.cache.currentKey = key;
                    this.cache.currentElementCount += row.length;
                    this.cache.currentKey = null;
                }
            },

            /**
             * @param {String} key
             * @param {String} row
             * @private
             */
            _renderOption: function (key, row) {
                if (row && row.length > 0 && row[0] !== null) {
                    var widget = this;
                    var optionTotalPrice = 0;
                    var optionSku = '';

                    row.forEach(function(item){
                        var sku = widget.cache.currentElementBundle.options[key].selections[item].sku;
                        var qty = widget.cache.currentElement.options[key].selections[item].qty;

                        optionTotalPrice += widget.cache.currentElement.options[key].selections[item].prices.finalPrice.amount
                            * widget.cache.currentElement.options[key].selections[item].qty;

                        optionSku += sku + '-';
                        if(qty > 1) {
                            optionSku += qty + '-';
                        }
                    });

                    this.cache.currentElement.selectedPrice += optionTotalPrice;
                    this.cache.currentElement.selectedSku += optionSku;
                    this.cache.currentKey = key;
                    this.cache.currentElementCount += row.length;
                    this.cache.currentKey = null;
                }
            },

            /**
             * Method extracts data from the event and updates the Bread button
             * @private
             */
            updateBread: function updateBread(changes) {
                this.cache.currentElementCount             = 0;
                this.cache.currentElement.selectedPrice    = this.options.optionConfigBundle.basePrice;
                this.cache.currentElement.selectedSku      = this.options.optionConfigBundle.sku + '///';

                $.each(this.cache.currentElement.selected, $.proxy(this._renderOption, this));
                //$.each(this.cache.currentElement.selectedCustom, $.proxy(this._renderCustomOption, this));
                this.cache.currentElement.selectedSku = this.cache.currentElement.selectedSku.slice(0, -1);

                if((this.cache.currentElement.previousPrice !== this.cache.currentElement.selectedPrice)
                    || (this.cache.currentElement.previousSku !== this.cache.currentElement.selectedSku)) {

                    this.cache.currentElement.previousPrice = this.cache.currentElement.selectedPrice;
                    this.cache.currentElement.previousSku = this.cache.currentElement.selectedSku;

                    if(this.cache.currentElement.selectedPrice > 0) {
                        document.defaultItems[0]["sku"]     = this.cache.currentElement.selectedSku;
                        document.defaultItems[0]["price"]   = this.cache.currentElement.selectedPrice * 100;
                        document.selectedSku                = this.cache.currentElement.selectedSku;
                        document.configureButton(document.defaultItems);
                    }
                }
            },
        });

        $(document).ready(function() {
            /**
             * Overlay element onto bread button to prevent
             * it from being clicked until options are selected
             */
            $(bundleConfig.addToCartForm).bundleBread();

            $(bundleConfig.buttonPrimaryCustom).on('click', function() {
                $(bundleConfig.bundleButtonSel).appendTo(bundleConfig.bundleButtonDetailsContSel);
            });

            $(bundleConfig.buttonBackCustom).on('click', function() {
                $(bundleConfig.bundleButtonSel).appendTo(bundleConfig.bundleButtonMainConSel);
            });
        });

        return $.mage.bundleBread;
    });
</script>
