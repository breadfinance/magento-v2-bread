<?php /** @var $block Bread\BreadCheckout\Block\Product\View */ ?>
<?php  echo $block->getBeforeHtml(); ?>

<div id="bread-btn-cntnr">
    <div id="bread-checkout-btn" title="Bread Checkout" class="button" <?php /* @noEscape */ echo $block->getIsDefaultSize(); ?>>
        <span>
            <span><img src="<?php /* @noEscape */ echo $block->getViewFileUrl('Bread_BreadCheckout/bread/images/ajax-loader-small.gif'); ?>" alt="<?php /* @noEscape */ echo __('Bread Checkout'); ?>" /></span>
        </span>
    </div>
    <div class="button-prevent" id="button-prevent">
        <span class="buy_error_tip override_tip" data-content="<?= __('Please complete product configuration') ?>">&nbsp;</span>
    </div>
</div>

<script>
    require([
        'jquery',
        'jquery/validate',
        'mage/validation'
    ], function($) {
        document.configureButton = function (items) {
            var buttonOnProduct     = <?php /* @noEscape */ echo $block->getIsButtonOnProduct(); ?>;
            var buttonCss           = '<?php /* @noEscape */ echo $block->getButtonDesign(); ?>';
            var cartSizeFinancing   = <?php /* @noEscape */ echo $this->getCartSizeFinancingJson(); ?>;
            var total = 0;
            for(var i = 0; i < items.length; i++){
                total += items[i]['price'] * items[i]['quantity'];
            }

            var breadConfig = {
                buttonId: "bread-checkout-btn",
                <?php if(!$this->isHealthcare()) : ?>
                items: items,
                <?php else : ?>
                customTotal: total,
                <?php endif; ?>
                discounts: <?php echo $block->getDiscountDataJson(); ?>,
                allowCheckout: <?php echo $block->getAllowCheckout(); ?>,

                done: function (err, tx_token) {
                    if (tx_token !== undefined) {
                        var i = document.createElement('input');
                        var k = document.createElement('input');
                        i.type = 'hidden';
                        i.name = 'token';
                        i.value = tx_token;
                        k.type = 'hidden';
                        k.name = 'form_key';
                        k.value = $.cookie('form_key');
                        var f = document.createElement('form');
                        f.action = '<?php /* @noEscape */ echo $block->getValidateOrderUrl(); ?>?product_page=1';
                        f.method = 'POST';
                        f.appendChild(i);
                        f.appendChild(k);
                        document.body.appendChild(f);
                        f.submit();
                    } else {
                        handleError('tx_token undefined in done callback');
                    }
                },

                /**
                 * Calculate tax value callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateTax: function (shippingAddress, callback) {

                    shippingAddress.block_key                       = '<?php /* @noEscape */ echo $block->getBlockCode(); ?>';
                    shippingAddress.product_type                    = '<?php echo \Magento\GroupedProduct\Model\Product\Type\Grouped::TYPE_CODE ?>';
                    shippingAddress.items                           = breadConfig.items;
                    shippingAddress.additional_data                 = <?php /* @noEscape */ echo  $block->jsonEncode($block->setAdditionalData()); ?>;

                    var taxEstimationUrl = '<?php /* @noEscape */ echo $block->getTaxEstimationUrl(); ?>';
                    $.ajax({
                        url: taxEstimationUrl,
                        data: {shippingInfo: JSON.stringify(shippingAddress)},
                        type: 'post'
                    }).done(function (response) {
                        try {
                            if (typeof response == 'object') {
                                if (response.error) {
                                    alert(response.message);
                                } else {
                                    callback(null, response.result);
                                }
                            }
                        }
                        catch (e) {
                            handleError(e.message);
                        }
                    }).fail(function(error) {
                        handleError('Error code returned when calling ' + taxEstimationUrl + ', with status: ' + error.statusText);
                    });
                },

                /**
                 * Calculate shipping cost callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateShipping: function (shippingAddress, callback) {

                    shippingAddress.block_key                       = '<?php /* @noEscape */ echo $block->getBlockCode(); ?>';
                    shippingAddress.product_type                    = '<?php echo \Magento\GroupedProduct\Model\Product\Type\Grouped::TYPE_CODE ?>';
                    shippingAddress.items                           = breadConfig.items;
                    shippingAddress.additional_data                 = <?php /* @noEscape */ echo  $block->jsonEncode($block->setAdditionalData()); ?>;

                    var shippingAddressEstimationUrl = '<?php /* @noEscape */ echo $block->getShippingAddressEstimationUrl(); ?>';
                    $.ajax({
                        url: shippingAddressEstimationUrl,
                        data: shippingAddress,
                        type: 'post'
                    }).done(function (response) {
                        try {
                            if (typeof response == 'object') {
                                if (response.error) {
                                    alert(response.message);
                                } else {
                                    callback(null, response.result);
                                }
                            }
                        }
                        catch (e) {
                            handleError(e.message);
                        }
                    }).fail(function(error) {
                        handleError('Error code returned when calling ' + shippingAddressEstimationUrl + ', with status: ' + error.statusText);
                    });
                },

                /**
                 * Add to cart call back used when allow checkout from product page = false
                 *
                 * @param callback
                 */
                addToCart:  function(callback) {
                    document.getElementById('product_addtocart_form').submit();
                }
            };

            if (buttonCss !== null && buttonCss !== '' && buttonCss != false) {
                breadConfig.customCSS = buttonCss;
            }

            if (buttonOnProduct === true) {
                breadConfig.actAsLabel = false;
            }

            if(cartSizeFinancing.enabled){
                var cartSizeFinancingId = cartSizeFinancing.id;
                var cartSizeThreshold = cartSizeFinancing.threshold;
                var itemsPriceSum = items.reduce(function(sum, item) { return sum + item.price * item.quantity }, 0) / 100;
                breadConfig.financingProgramId = (itemsPriceSum >= cartSizeThreshold) ? cartSizeFinancingId : 'null';
            }

            var configDataUrl = '<?php /* @noEscape */ echo $block->getConfigDataUrl(); ?>';
            $.ajax({
                url: configDataUrl,
                type: 'post',
                context: this
            }).done(function(data) {
                <?php if(!$this->isHealthcare()) : ?>
                if (data.shippingContact !== false) {
                    breadConfig.shippingContact = data.shippingContact;
                }

                if (data.billingContact !== false) {
                    breadConfig.billingContact = data.billingContact;
                }
                <?php endif; ?>

                if (typeof bread !== 'undefined') {
                    bread.checkout(breadConfig);
                }
            }).fail(function(error) {
                handleError('Error code returned when calling ' + configDataUrl + ', with status: ' + error.statusText);
            });

        };

        $(document).ready(function() {

            /**
             * Overlay element onto bread button to prevent
             * it from being clicked until options are selected
             */
            $('.button-prevent').show();

            $('#product_addtocart_form').on('change', function() {
                document.updateButton(this);
            });

            <?php if ($block->getProduct() != null) : ?>
            document.configureButton(<?php /* @noEscape */ echo $block->getGroupedDataJson(); ?>);
            <?php endif; ?>
        });

        document.updateButton = function(form) {
            if ($(form).valid()) {
                $('.button-prevent').hide();

                var groupedButtonUpdateUrl = '<?php echo $block->getGroupedButtonUpdate()?>';
                $.ajax({
                    url: groupedButtonUpdateUrl,
                    data: $(form).serialize(),
                    type: 'post',
                    context: this
                }).done(function(response) {
                    if (response.items) {
                        document.configureButton(response.items);
                    }
                }).fail(function(error) {
                    handleError('Error code returned when calling ' + groupedButtonUpdateUrl + ', with status: ' + error.statusText);
                });
            }
        };

    });
</script>