<?php /** @var $block Bread\BreadCheckout\Block\Product\View */ ?>
<?php  echo $block->getBeforeHtml(); ?>

<div id="bread-btn-cntnr">
    <div id="bread-checkout-btn" title="Bread Checkout" class="button" <?php /* @noEscape */ echo $block->getIsDefaultSize(); ?>>
        <span>
            <span><img src="<?php /* @noEscape */ echo $block->getViewFileUrl('Bread_BreadCheckout/bread/images/ajax-loader-small.gif'); ?>" alt="<?php /* @noEscape */ echo __('Bread Checkout'); ?>" /></span>
        </span>
    </div>
    <div class="button-prevent" id="button-prevent">
        <span class="buy_error_tip override_tip" data-content="<?= __('Please complete product configuration') ?>">&nbsp;</span>
    </div>
</div>

<script type="text/x-magento-init">
    {
        "*": {
             "Bread_BreadCheckout/js/product/button": {
                "buttonId": "#bread-checkout-btn, #button-prevent",
                "requiredOptionsSelector": ".product-options-wrapper [aria-required=\"true\"]"
             }
        }
    }
</script>

<script type="text/javascript">
    require(['jquery'], function($) {
        document.configureButton = function (items) {
            var buttonOnProduct     = <?php /* @noEscape */ echo $block->getIsButtonOnProduct(); ?>;
            var buttonCss           = '<?php /* @noEscape */ echo $block->getButtonDesign(); ?>';
            var cartSizeFinancing   = <?php /* @noEscape */ echo $this->getCartSizeFinancingJson(); ?>;
            var breadConfig = {
                buttonId: "bread-checkout-btn",
                asLowAs: <?php echo $this->getAsLowAs(); ?>,
                <?php if(!$this->isHealthcare()) : ?>
                items: items,
                <?php else : ?>
                customTotal: items[0]['price'],
                <?php endif; ?>
                discounts: <?php echo $this->getDiscountDataJson(); ?>,
                allowCheckout: <?php echo $this->getAllowCheckout(); ?>,
                done: function (err, tx_token) {
                    if (tx_token !== undefined) {
                        var i = document.createElement('input');
                        var k = document.createElement('input');
                        i.type = 'hidden';
                        i.name = 'token';
                        i.value = tx_token;
                        k.type = 'hidden';
                        k.name = 'form_key';
                        k.value = $.cookie('form_key');
                        var f = document.createElement('form');
                        f.action = '<?php /* @noEscape */ echo $block->getValidateOrderUrl(); ?>?product_page=1';
                        f.method = 'POST';
                        f.appendChild(i);
                        f.appendChild(k);
                        document.body.appendChild(f);
                        f.submit();
                    } else {
                        var errorInfo = {
                            bread_config: breadConfig,
                            err: err
                        };
                        document.logIssue('error', errorInfo, 'tx_token undefined in done callback');
                    }
                },

                /**
                 * Calculate tax value callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateTax: function (shippingAddress, callback) {
                    var productForm = $('#product_addtocart_form');
                    var errorInfo;

                    shippingAddress.block_key                       = '<?php /* @noEscape */ echo $block->getBlockCode(); ?>';
                    shippingAddress.additional_data                 = <?php /* @noEscape */ echo  $block->jsonEncode($block->setAdditionalData()); ?>;
                    shippingAddress.selected_sku                    = document.selectedSku + document.customOptions;
                    shippingAddress.selected_simple_product_id      = document.selectedSimpleProductId;
                    shippingAddress.main_product_id                 = document.productId;
                    shippingAddress.buy_request                     = productForm.serialize();

                    var taxEstimationUrl = '<?php /* @noEscape */ echo $block->getTaxEstimationUrl(); ?>';
                    var shippingString = JSON.stringify(shippingAddress);

                    $.ajax({
                        url: taxEstimationUrl,
                        data: { shippingInfo: shippingString },
                        type: 'post'
                    }).done(function(response) {
                        try {
                            if (typeof response == 'object') {
                                if (response.error) {
                                    errorInfo = {
                                        response: response,
                                        shipping_info: shippingString,
                                    };
                                    document.logIssue('error', errorInfo, 'Error estimating tax');

                                    alert(response.message);
                                } else {
                                    callback(null, response.result);
                                }
                            }
                        }
                        catch (e) {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingString,
                            };
                            document.logIssue('error', errorInfo, e);
                        }
                    }).fail(function(error) {
                        errorInfo = {
                            shipping_info: shippingString,
                        };
                        document.logIssue('error', errorInfo,
                            'Error code returned when calling ' + taxEstimationUrl + ', with status: ' + error.statusText);
                    });
                },

                /**
                 * Calculate shipping cost callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateShipping: function (shippingAddress, callback) {
                    var productForm = $('#product_addtocart_form');
                    var errorInfo;

                    shippingAddress.block_key                       = '<?php /* @noEscape */ echo $block->getBlockCode(); ?>';
                    shippingAddress.additional_data                 = <?php /* @noEscape */ echo  $block->jsonEncode($block->setAdditionalData()); ?>;
                    shippingAddress.selected_sku                    = document.selectedSku + document.customOptions;
                    shippingAddress.selected_simple_product_id      = document.selectedSimpleProductId;
                    shippingAddress.main_product_id                 = document.productId;
                    shippingAddress.buy_request                     = productForm.serialize();

                    var shippingAddressEstimationUrl = '<?php /* @noEscape */ echo $block->getShippingAddressEstimationUrl(); ?>';
                    $.ajax({
                        url: shippingAddressEstimationUrl,
                        data: shippingAddress,
                        type: 'post'
                    }).done(function (response) {
                        try {
                            if (typeof response == 'object') {
                                if (response.error) {
                                    errorInfo = {
                                        response: response,
                                        shipping_info: shippingAddress,
                                    };
                                    document.logIssue('error', errorInfo, 'Error calculating shipping');

                                    alert(response.message);
                                } else {
                                    callback(null, response.result);
                                }
                            }
                        }
                        catch (e) {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingAddress,
                            };
                            document.logIssue('error', errorInfo, e);
                        }
                    }).fail(function(error) {
                        errorInfo = {
                            shipping_info: shippingAddress,
                        };
                        document.logIssue('error', errorInfo,
                            'Error code returned when calling ' + shippingAddressEstimationUrl + ', with status: ' + error.statusText);
                    });
                },

                /**
                 * Add to cart call back used when allow checkout from product page = false
                 *
                 * @param callback
                 */
                addToCart:  function(callback) {
                    document.getElementById('product_addtocart_form').submit();
                }
            };

            if (buttonCss !== null && buttonCss !== '' && buttonCss != false) {
                breadConfig.customCSS = buttonCss;
            }

            if (buttonOnProduct === true) {
                breadConfig.actAsLabel = false;
            }

            if(cartSizeFinancing.enabled){
                var cartSizeFinancingId = cartSizeFinancing.id;
                var cartSizeThreshold = cartSizeFinancing.threshold;
                var itemsPriceSum = items.reduce(function(sum, item) { return sum + item.price * item.quantity; }, 0) / 100;
                breadConfig.financingProgramId = (itemsPriceSum >= cartSizeThreshold) ? cartSizeFinancingId : 'null';
            }

            if (!document.hasCheckedConfigData) {

                var configDataUrl = '<?php /* @noEscape */ echo $block->getConfigDataUrl(); ?>';
                $.ajax({
                    url: configDataUrl,
                    type: 'post',
                    context: this
                }).done(function(data) {
                    document.hasCheckedConfigData = true;

                    if (data.shippingContact !== false) {
                        breadConfig.shippingContact = data.shippingContact;
                    }

                    if (data.billingContact !== false) {
                        breadConfig.billingContact = data.billingContact;
                    }

                    if (typeof bread !== 'undefined') {
                        bread.checkout(breadConfig);
                    }
                }).fail(function(error) {
                    document.logIssue('error', {},
                        'Error code returned when calling ' + configDataUrl + ', with status: ' + error.statusText);
                });

            } else {
                bread.checkout(breadConfig);
            }
        };

        /**
         * Remove items fron quote after 
         * discount calculation
         */
        document.clearQuote = function() {
            var clearQuoteUrl = '<?php /* @noEscape */ echo $block->getClearQuoteUrl(); ?>';
            $.ajax({
                url: clearQuoteUrl
            }).fail(function(error) {
                document.logIssue('error', {},
                    'Error code returned when calling ' + clearQuoteUrl + ', with status: ' + error.statusText);
            });
        };

    <?php if ($block->getProduct() != null) : ?>

        /**
         * Reconfigure Bread checkout button with updated
         * price and sku values
         */
        document.resetPriceAndSku = function(configurable) {
            if (!configurable) {
                document.configureButton(document.defaultItems);
            }
            else {
                var price = document.calculatePrice();

                if(typeof document.customOptions !== "undefined"){
                    sku = document.selectedSku + document.customOptions;
                } else {
                    sku = document.selectedSku;
                }

                if (sku != document.previousSku || price != document.previousPrice) {
                    document.previousSku                    = sku;
                    document.previousPrice                  = price;
                    document.defaultItems[0]["sku"]         = document.previousSku;
                    document.defaultItems[0]["price"]       = document.previousPrice;
                    document.configureButton(document.defaultItems);
                }
            }
        };

        /**
         * Calculate updated price based on attribute selections
         * and/or custom options
         *
         * @returns int
         */
        document.calculatePrice = function() {
            var price = 0;
            var customPrice = 0;

            if (document.priceWithOptions) {
                customPrice = document.priceWithOptions;
            }

            var selectedProductPrices = spConfig && spConfig.optionPrices[document.selectedSimpleProductId];

            if (selectedProductPrices) {
                price = parseInt(Math.round(selectedProductPrices.finalPrice.amount * 100));
            }

            return Math.max(price, customPrice);
        };
        <?php endif; ?>
        document.defaultItems       = <?php /* @noEscape */ echo $block->getProductDataJson(); ?>;
        document.previousPrice      = document.defaultItems[0]["price"];
        document.previousSku        = document.defaultItems[0]["sku"];

        $(document).ready(function () {
            <?php if ($block->getProduct() != null) : ?>
                document.productId                      = '<?php /* @noEscape */ echo $block->getProduct()->getId(); ?>';
                document.baseProductSku                 = '<?php /* @noEscape */ echo $block->getProduct()->getSku(); ?>';
                document.selectedSku                    = '<?php /* @noEscape */ echo $block->getProduct()->getSku(); ?>';
                document.selectedSimpleProductId        = '<?php /* @noEscape */ echo $block->getProduct()->getId(); ?>';
                document.resetPriceAndSku(false);
            <?php else : ?>
                document.configureButton(document.defaultItems);
            <?php endif; ?>
        });
    });
</script>
