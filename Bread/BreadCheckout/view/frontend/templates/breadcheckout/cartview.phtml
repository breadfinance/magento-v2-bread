<?php /* @var $this Bread\BreadCheckout\Block\Checkout\Overview */ ?>
<?php  echo $this->getBeforeHtml(); ?>
<div id="bread-btn-cntnr">
    <div id="bread-checkout-btn" title="Bread Checkout" class="button" <?php echo $this->getIsDefaultSize(); ?>>
        <span>
            <span><?php echo __('Bread Checkout'); ?></span>
        </span>
    </div>
</div>

<script type="text/javascript">
    require(['jquery'], function($, quote){
        document.configureButton = function (items) {
            var address             = <?php echo $this->getShippingAddressData(); ?>;
            var billingAddress      = <?php echo $this->getBillingAddressData(); ?>;
            var buttonOnProduct     = <?php echo $this->getIsButtonOnProduct(); ?>;
            var buttonCss           = '<?php echo $this->getButtonDesign(); ?>';

            var breadConfig = {
                buttonId: "bread-checkout-btn",
                asLowAs: <?php echo $this->getAsLowAs(); ?>,
                actAsLabel: false,
                items: items,
                allowCheckout: <?php echo $this->getAllowCheckout(); ?>,
                buttonLocation: '<?php echo $this->getCartSummaryLocation(); ?>',

                done: function (err, tx_token) {
                    if (tx_token !== undefined) {
                        var i = document.createElement('input');
                        i.type = 'hidden';
                        i.name = 'token';
                        i.value = tx_token;
                        var f = document.createElement('form');
                        f.action = '<?php echo $this->getValidateOrderUrl(); ?>';
                        f.method = 'POST';
                        f.appendChild(i);
                        document.body.appendChild(f);
                        f.submit();
                    }

                    return;
                },

                /**
                 * Calculate tax value callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateTax: function (shippingAddress, callback) {
                    shippingAddress.block_key        = '<?php echo $this->getBlockCode(); ?>';
                    shippingAddress.additional_data  = <?php echo  $this->jsonEncode($this->setAdditionalData()); ?>;

                    $.ajax({
                        url: '<?php echo $this->getTaxEstimationUrl(); ?>',
                        data: {shippingInfo: JSON.stringify(shippingAddress)},
                        type: 'post'
                    }).done(function (response) {
                        try {
                            if (typeof response == 'object') {
                                if (response.error) {
                                    alert(response.message);
                                } else {
                                    callback(null, response.result);
                                }
                            }
                        }
                        catch (e) {
                            console.log(e);
                        }
                    }).fail(function (error) {
                        console.log(error);
                    });
                },

                /**
                 * Calculate shipping cost callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateShipping: function (shippingAddress, callback) {
                    shippingAddress.block_key        = '<?php echo $this->getBlockCode(); ?>';
                    shippingAddress.additional_data  = <?php echo  $this->jsonEncode($this->setAdditionalData()); ?>;

                    $.ajax({
                        url: '<?php echo $this->getShippingAddressEstimationUrl(); ?>',
                        data: shippingAddress,
                        type: 'post'
                    }).done(function (response) {
                        try {
                            if (typeof response == 'object') {
                                if (response.error) {
                                    alert(response.message);
                                } else {
                                    callback(null, response.result);
                                }
                            }
                        }
                        catch (e) {
                            console.log(e);
                        }
                    }).fail(function (error) {
                        console.log(error);
                    });
                }
            };

            if (buttonCss !== null && buttonCss !== '' && buttonCss != false) {
                breadConfig.customCSS = buttonCss;
            }

            if (address !== false) {
                breadConfig.shippingContact = address;
            }

            if (billingAddress !== false) {
                breadConfig.billingContact = billingAddress;
            }

            if (buttonOnProduct === true) {
                breadConfig.actAsLabel = false;
            }

            var discountAmount =- document.round(window.checkoutConfig.totalsData.discount_amount);
            if (discountAmount > 0) {
                breadConfig.discounts = [{
                    amount: discountAmount,
                    description: (window.checkoutConfig.totalsData.coupon_code !== null) ?
                        window.checkoutConfig.totalsData.coupon_code :
                        "Discount"
                }];
            }
            <?php if ($this->isCartSizeTargetedFinancing()): ?>
            var cartSizeFinancingId = '<?php echo $this->getCartSizeFinancingId() ?>';
            var cartSizeThreshold = '<?php echo $this->getCartSizeThreshold(); ?>';
            var itemsPriceSum = items.reduce(function(sum, item) {return sum + item.price * item.quantity}, 0) / 100;
            breadConfig.financingProgramId = (itemsPriceSum >= cartSizeThreshold) ? cartSizeFinancingId : 'null';
            <?php endif; ?>
            bread.checkout(breadConfig);
        };

        document.round = function(value) {
            return parseInt(
                Number(Math.round(parseFloat(value) + 'e' + 2) + 'e-' + 2)
                * 100
            );
        };

        $(document).ready(function() {
            document.defaultItems       = <?php echo $this->getProductDataJson(); ?>;
            document.previousPrice      = document.defaultItems[0]["price"];
            document.previousSku        = document.defaultItems[0]["sku"];
            document.configureButton(document.defaultItems);
        });
    });
</script>