<?php /* @var $this Bread\BreadCheckout\Block\Product\View */ ?>
<?php  echo $this->getBeforeHtml(); ?>
<div id="bread-btn-cntnr">
    <div id="bread-checkout-btn" title="Bread Checkout" class="button" <?php echo $this->getIsDefaultSize(); ?>>
        <span>
            <span><img src="<?php echo $block->getViewFileUrl('Bread_BreadCheckout/bread/images/ajax-loader-small.gif'); ?>" alt="<?php echo __('Bread Checkout'); ?>" /></span>
        </span>
    </div>
    <div class="button-prevent" id="button-prevent">
        <span class="buy_error_tip override_tip">&nbsp;</span>
    </div>
</div>

<script type="text/javascript">
    require(['jquery'], function($){
        document.configureButton = function (items) {
            var buttonOnProduct     = <?php echo $this->getIsButtonOnProduct(); ?>;
            var buttonCss           = '<?php echo $this->getButtonDesign(); ?>';

            var breadConfig = {
                buttonId: "bread-checkout-btn",
                asLowAs: <?php echo $this->getAsLowAs(); ?>,
                items: items,
                discounts: <?php echo $this->getDiscountDataJson(); ?>,
                allowCheckout: <?php echo $this->getAllowCheckout(); ?>,
                buttonLocation: '<?php echo $this->getProductViewLocation(); ?>',

                done: function (err, tx_token) {
                    if (tx_token !== undefined) {
                        var i = document.createElement('input');
                        i.type = 'hidden';
                        i.name = 'token';
                        i.value = tx_token;
                        var f = document.createElement('form');
                        f.action = '<?php echo $this->getValidateOrderUrl(); ?>';
                        f.method = 'POST';
                        f.appendChild(i);
                        document.body.appendChild(f);
                        f.submit();
                    }

                    return;
                },

                /**
                 * Calculate tax value callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateTax: function (shippingAddress, callback) {
                    shippingAddress.block_key                       = '<?php echo $this->getBlockCode(); ?>';
                    shippingAddress.additional_data                 = <?php echo  $this->jsonEncode($this->setAdditionalData()); ?>;
                    shippingAddress.selected_sku                    = document.selectedSku + document.customOptions;
                    shippingAddress.selected_simple_product_id      = document.selectedSimpleProductId;
                    shippingAddress.main_product_id                 = document.productId;

                    $.ajax({
                        url: '<?php echo $this->getTaxEstimationUrl(); ?>',
                        data: {shippingInfo: JSON.stringify(shippingAddress)},
                        type: 'post'
                    }).done(function (response) {
                        try {
                            if (typeof response == 'object') {
                                if (response.error) {
                                    alert(response.message);
                                } else {
                                    callback(null, response.result);
                                }
                            }
                        }
                        catch (e) {
                            console.log(e);
                        }
                    });
                },

                /**
                 * Calculate shipping cost callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateShipping: function (shippingAddress, callback) {
                    shippingAddress.block_key                       = '<?php echo $this->getBlockCode(); ?>';
                    shippingAddress.additional_data                 = <?php echo  $this->jsonEncode($this->setAdditionalData()); ?>;
                    shippingAddress.selected_sku                    = document.selectedSku + document.customOptions;
                    shippingAddress.selected_simple_product_id      = document.selectedSimpleProductId;
                    shippingAddress.main_product_id                 = document.productId;

                    $.ajax({
                        url: '<?php echo $this->getShippingAddressEstimationUrl(); ?>',
                        data: shippingAddress,
                        type: 'post'
                    }).done(function (response) {
                        try {
                            if (typeof response == 'object') {
                                if (response.error) {
                                    alert(response.message);
                                } else {
                                    callback(null, response.result);
                                }
                            }
                        }
                        catch (e) {
                            console.log(e);
                        }
                    });
                },

                /**
                 * Add to cart call back used when allow checkout from product page = false
                 *
                 * @param callback
                 */
                addToCart:  function(callback) {
                    document.getElementById('product_addtocart_form').submit();
                }
            };

            if (buttonCss !== null && buttonCss !== '' && buttonCss != false) {
                breadConfig.customCSS = buttonCss;
            }

            if (buttonOnProduct === true) {
                breadConfig.actAsLabel = false;
            }

            <?php if ($this->isCartSizeTargetedFinancing()): ?>
            var cartSizeFinancingId = '<?php echo $this->getCartSizeFinancingId() ?>';
            var cartSizeThreshold = '<?php echo $this->getCartSizeThreshold(); ?>';
            var itemsPriceSum = items.reduce(function(sum, item) {return sum + item.price * item.quantity}, 0) / 100;
            breadConfig.financingProgramId = (itemsPriceSum >= cartSizeThreshold) ? cartSizeFinancingId : 'null';
            <?php endif; ?>

            $.ajax({
                url: '<?php echo $this->getConfigDataUrl(); ?>',
                type: 'post',
                context: this
            }).done(function(data) {
                if (data.shippingContact != false) {
                    breadConfig.shippingContact = data.shippingContact;
                }

                if (data.billingContact != false) {
                    breadConfig.billingContact = data.billingContact;
                }

                bread.checkout(breadConfig);
            });
        };

    <?php if( $this->getProduct() != null ): ?>

        /**
         * Reconfigure Bread checkout button with updated
         * price and sku values
         */
        document.resetPriceAndSku = function(configurable) {
            if (!configurable) {
                document.configureButton(document.defaultItems);
            }
            else {
                var price = document.calculatePrice();
                sku = document.selectedSku + document.customOptions;

                if (sku != document.previousSku || price != document.previousPrice) {
                    document.previousSku                    = sku;
                    document.previousPrice                  = price;
                    document.defaultItems[0]["sku"]         = document.previousSku;
                    document.defaultItems[0]["price"]       = document.previousPrice;
                    document.configureButton(document.defaultItems);
                }
            }
        };

        /**
         * Calculate updated price based on attribute selections
         * and/or custom options
         *
         * @returns int
         */
        document.calculatePrice = function() {
            var price;

            if (typeof document.priceWithOptions != 'undefined') {
                var customPrice = document.priceWithOptions;
            }

            if (typeof spConfig != 'undefined') {
                price = parseInt(spConfig.optionPrices[document.selectedSimpleProductId].finalPrice.amount * 100);

                if ((typeof customPrice != 'undefined') &&
                    (customPrice !== price)) {
                    if (customPrice > price) {
                        price = (customPrice - price) + price;
                    } else {
                        price = (price - customPrice) + customPrice;
                    }
                }
            } else {
                price = customPrice;
            }

            return price;
        };
<?php endif; ?>
        document.defaultItems       = <?php echo $this->getProductDataJson(); ?>;
        document.previousPrice      = document.defaultItems[0]["price"];
        document.previousSku        = document.defaultItems[0]["sku"];

        $(document).ready(function () {
            <?php if ($this->getProduct() != null): ?>
                document.customOptions = "";
                document.productId                      = '<?php echo $this->getProduct()->getId(); ?>';
                document.baseProductSku                 = '<?php echo $this->getProduct()->getSku(); ?>';
                document.selectedSku                    = '<?php echo $this->getProduct()->getSku(); ?>';
                document.selectedSimpleProductId        = '<?php echo $this->getProduct()->getId(); ?>';
                document.resetPriceAndSku(false);
            <?php else: ?>
                document.configureButton(document.defaultItems);
            <?php endif; ?>
        });
    });
</script>